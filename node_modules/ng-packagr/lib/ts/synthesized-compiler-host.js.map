{"version":3,"file":"synthesized-compiler-host.js","sourceRoot":"","sources":["../../../src/lib/ts/synthesized-compiler-host.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,uEAAqF;AAErF;;;;;;;GAOG;AACH,qDACE,WAA4B,EAC5B,eAAmC;IAEnC,MAAM,OAAO,GAAG,EAAE,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;IAEvD,MAAM,mBACD,OAAO,IACV,aAAa,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE;YACnC,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;YAExE,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,iEAAiE;gBACjE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAChE,UAAU,CAAC,oBAAoB,CAAC,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,CAAC;gBAClF,CAAC;gBAED,8DAA8D;gBAC9D,MAAM,gBAAgB,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;gBACtD,EAAE,CAAC,CAAC,gBAAgB,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC5D,MAAM,CAAC,yCAAe,CAAC,UAAU,CAAC,CAAC;gBACrC,CAAC;gBAED,MAAM,CAAC,UAAU,CAAC;YACpB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAClD,CAAC;QACH,CAAC,EACD,mBAAmB,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE;YACvD,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAEpC,uCAAuC;YACvC,uEAAuE;QACzE,CAAC,IACD;AACJ,CAAC;AAnCD,kGAmCC","sourcesContent":["import * as ts from 'typescript';\nimport { isSynthesizedSourceFile, writeSourceFile } from './synthesized-source-file';\n\n/**\n * Creates a TypeScript {@link CompilerHost} that reads source files from a collection. Should\n * a source file include synthesized source text replacements, i.e., the source file is a\n * {@link SynthesizedSourceFile}, it will apply source text replacements.\n *\n * @param sourceFiles A collection of TypeScript source files\n * @param compilerOptions Compiler options\n */\nexport function createCompilerHostForSynthesizedSourceFiles(\n  sourceFiles: ts.SourceFile[],\n  compilerOptions: ts.CompilerOptions\n): ts.CompilerHost {\n  const wrapped = ts.createCompilerHost(compilerOptions);\n\n  return {\n    ...wrapped,\n    getSourceFile: (fileName, version) => {\n      const sourceFile = sourceFiles.find(file => file.fileName === fileName);\n\n      if (sourceFile) {\n        // FIX @link https://github.com/Microsoft/TypeScript/issues/19950\n        if (!sourceFile['ambientModuleNames'] && sourceFile['original']) {\n          sourceFile['ambientModuleNames'] = sourceFile['original']['ambientModuleNames'];\n        }\n\n        // FIX synthesized source files cause ngc/tsc/tsickle to chock\n        const hasSyntheticFlag = (sourceFile.flags & 8) !== 0;\n        if (hasSyntheticFlag || isSynthesizedSourceFile(sourceFile)) {\n          return writeSourceFile(sourceFile);\n        }\n\n        return sourceFile;\n      } else {\n        return wrapped.getSourceFile(fileName, version);\n      }\n    },\n    getSourceFileByPath: (fileName, path, languageVersion) => {\n      throw new Error(`Not implemented.`);\n\n      // console.warn('getSourceFileByPath');\n      // return wrapped.getSourceFileByPath(fileName, path, languageVersion);\n    }\n  };\n}\n"]}