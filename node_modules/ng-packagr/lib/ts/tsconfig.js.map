{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../src/lib/ts/tsconfig.ts"],"names":[],"mappings":";;AAAA,4CAA4C;AAI5C,6BAA6B;AAC7B,iCAAiC;AAQjC;;GAEG;AACH,6BAAoC,QAAiB;IACnD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACd,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,EAAE,mBAAmB,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,CAAC,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC;AAND,kDAMC;AAED;;;GAGG;AACU,QAAA,kBAAkB,GAAG,CAAC,eAAyB,EAAE,UAAwB,EAAE,MAAc,EAAY,EAAE;IAClH,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAExD,iCAAiC;IACjC,MAAM,QAAQ,qBAAQ,eAAe,CAAE,CAAC;IAExC,QAAQ,CAAC,SAAS,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAChD,QAAQ,CAAC,OAAO,CAAC,YAAY,GAAG,UAAU,CAAC,QAAQ,CAAC;IACpD,QAAQ,CAAC,OAAO,CAAC,iBAAiB,GAAG,GAAG,UAAU,CAAC,cAAc,KAAK,CAAC;IACvE,QAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACrC,QAAQ,CAAC,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;IACpC,QAAQ,CAAC,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;IACpC,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;IAEjC,EAAE,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;QAC7B,yEAAyE;QACzE,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC;IAChF,CAAC;IAED,MAAM,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7B,KAAK,UAAU;YACb,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC3C,KAAK,CAAC;QACR,KAAK,OAAO;YACV,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;YACxC,KAAK,CAAC;QACR,KAAK,cAAc;YACjB,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,KAAK,CAAC;QACR;YACE,KAAK,CAAC;IACV,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import * as ng from '@angular/compiler-cli';\n// XX: has or is using name 'ParsedConfiguration' ... but cannot be named\nimport { ParsedConfiguration } from '@angular/compiler-cli';\nimport { InjectionToken, FactoryProvider } from 'injection-js';\nimport * as path from 'path';\nimport * as ts from 'typescript';\nimport { NgEntryPoint } from '../ng-package-format/entry-point';\n\n/**\n * TypeScript configuration used internally (marker typer).\n */\nexport type TsConfig = ng.ParsedConfiguration;\n\n/**\n * Reads the default TypeScript configuration.\n */\nexport function readDefaultTsConfig(fileName?: string): TsConfig {\n  if (!fileName) {\n    fileName = path.resolve(__dirname, 'conf', 'tsconfig.ngc.json');\n  }\n\n  return ng.readConfiguration(fileName);\n}\n\n/**\n * Initializes TypeScript Compiler options and Angular Compiler options by overriding the\n * default config with entry point-specific values.\n */\nexport const initializeTsConfig = (defaultTsConfig: TsConfig, entryPoint: NgEntryPoint, outDir: string): TsConfig => {\n  const basePath = path.dirname(entryPoint.entryFilePath);\n\n  // Resolve defaults from DI token\n  const tsConfig = { ...defaultTsConfig };\n\n  tsConfig.rootNames = [entryPoint.entryFilePath];\n  tsConfig.options.flatModuleId = entryPoint.moduleId;\n  tsConfig.options.flatModuleOutFile = `${entryPoint.flatModuleFile}.js`;\n  tsConfig.options.basePath = basePath;\n  tsConfig.options.baseUrl = basePath;\n  tsConfig.options.rootDir = basePath;\n  tsConfig.options.outDir = basePath;\n  tsConfig.options.genDir = outDir;\n\n  if (entryPoint.languageLevel) {\n    // ng.readConfiguration implicitly converts \"es6\" to \"lib.es6.d.ts\", etc.\n    tsConfig.options.lib = entryPoint.languageLevel.map(lib => `lib.${lib}.d.ts`);\n  }\n\n  switch (entryPoint.jsxConfig) {\n    case 'preserve':\n      tsConfig.options.jsx = ts.JsxEmit.Preserve;\n      break;\n    case 'react':\n      tsConfig.options.jsx = ts.JsxEmit.React;\n      break;\n    case 'react-native':\n      tsConfig.options.jsx = ts.JsxEmit.ReactNative;\n      break;\n    default:\n      break;\n  }\n\n  return tsConfig;\n};\n"]}