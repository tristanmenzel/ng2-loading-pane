{"version":3,"file":"tsc.js","sourceRoot":"","sources":["../../../src/lib/flatten/tsc.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,2CAAyG;AACzG,uCAA4E;AAC5E,qCAAoC;AAEpC;;;;;GAKG;AACH,0BAAuC,SAAiB,EAAE,UAAkB;;QAC1E,WAAK,CAAC,OAAO,SAAS,OAAO,UAAU,EAAE,CAAC,CAAC;QAC3C,MAAM,WAAW,GAAW,MAAM,mBAAQ,CAAC,SAAS,CAAC,CAAC;QACtD,MAAM,KAAK,GAAW,WAAW,CAAC,QAAQ,EAAE,CAAC;QAC7C,MAAM,eAAe,GAAoB;YACvC,MAAM,EAAE,yBAAY,CAAC,GAAG;YACxB,MAAM,EAAE,uBAAU,CAAC,MAAM;YACzB,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,IAAI;YACf,aAAa,EAAE,IAAI;YACnB,kBAAkB,EAAE,IAAI;YACxB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;SACjC,CAAC;QACF,MAAM,UAAU,GAAoB,4BAAe,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;YACnF,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;YACnC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC;YAC5C,eAAe;SAChB,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACvD,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC9C,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;QAElD,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,qBAAY,CAAC,UAAU,EAAE,UAAU,CAAC,UAAU,CAAC;YAC/C,qBAAU,CAAC,GAAG,UAAU,MAAM,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;SAC1D,CAAC,CAAC;IACL,CAAC;CAAA;AA3BD,4CA2BC;AAED,MAAM,MAAM,GAAG,oCAAoC,CAAC;AACpD,MAAM,aAAa,GAAG,CAAC,WAAmB,EAAU,EAAE;IACpD,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,oCAAoC,EAAE,EAAE,CAAC,CAAC;IACvE,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;AACH,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport { ScriptTarget, ModuleKind, TranspileOutput, transpileModule, CompilerOptions } from 'typescript';\nimport { readFile, outputJson, outputFile as fsOutputFile } from 'fs-extra';\nimport { debug } from '../util/log';\n\n/**\n * Downlevels a .js file from ES2015 to ES5. Internally, uses `tsc`.\n *\n * @param inputFile\n * @param outputFile\n */\nexport async function downlevelWithTsc(inputFile: string, outputFile: string): Promise<void> {\n  debug(`tsc ${inputFile} to ${outputFile}`);\n  const inputBuffer: Buffer = await readFile(inputFile);\n  const input: string = inputBuffer.toString();\n  const compilerOptions: CompilerOptions = {\n    target: ScriptTarget.ES5,\n    module: ModuleKind.ES2015,\n    allowJs: true,\n    sourceMap: true,\n    importHelpers: true,\n    downlevelIteration: true,\n    mapRoot: path.dirname(inputFile)\n  };\n  const transpiled: TranspileOutput = transpileModule(trimSourceMap(input.toString()), {\n    fileName: path.basename(outputFile),\n    moduleName: path.basename(outputFile, '.js'),\n    compilerOptions\n  });\n\n  const sourceMap = JSON.parse(transpiled.sourceMapText);\n  sourceMap['file'] = path.basename(outputFile);\n  sourceMap['sources'] = [path.basename(inputFile)];\n\n  await Promise.all([\n    fsOutputFile(outputFile, transpiled.outputText),\n    outputJson(`${outputFile}.map`, sourceMap, { spaces: 2 })\n  ]);\n}\n\nconst REGEXP = /\\/\\/# sourceMappingURL=.*\\.js\\.map/;\nconst trimSourceMap = (fileContent: string): string => {\n  if (fileContent.match(REGEXP)) {\n    return fileContent.replace(/\\/\\/# sourceMappingURL=.*\\.js\\.map/, '');\n  } else {\n    return fileContent;\n  }\n};\n"]}