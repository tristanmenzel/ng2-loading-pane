{"version":3,"file":"uglify.js","sourceRoot":"","sources":["../../../src/lib/flatten/uglify.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yCAAmC;AACnC,uCAA+C;AAC/C,+BAAyC;AACzC,uCAA4C;AAE5C,sBAAmC,SAAiB;;QAClD,WAAK,CAAC,iBAAiB,SAAS,EAAE,CAAC,CAAC;QAEpC,MAAM,aAAa,GAAW,cAAO,CAAC,SAAS,CAAC,CAAC;QACjD,MAAM,mBAAmB,GAAW,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;QAEpG,MAAM,UAAU,GAAW,GAAG,mBAAmB,OAAO,aAAa,EAAE,CAAC;QACxE,MAAM,YAAY,GAAW,GAAG,UAAU,MAAM,CAAC;QACjD,MAAM,eAAe,GAAW,MAAM,mBAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,MAAM,oBAAoB,GAAW,MAAM,mBAAQ,CAAC,GAAG,SAAS,MAAM,CAAC,CAAC;QACxE,MAAM,MAAM,GAAG,kBAAM,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE;YAChD,SAAS,EAAE;gBACT,OAAO,EAAE,oBAAoB,CAAC,QAAQ,EAAE;gBACxC,GAAG,EAAE,eAAQ,CAAC,YAAY,CAAC;aAC5B;YACD,KAAK,EAAE;gBACL,YAAY,EAAE,IAAI;aACnB;YACD,GAAG,EAAE,IAAI;YACT,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE;gBACN,QAAQ,EAAE,MAAM;aACjB;SACF,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,CAAC,MAAM,cAAc,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7C,UAAI,CAAC,cAAc,CAAC,CAAC;YACvB,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjB,MAAM,MAAM,CAAC,KAAK,CAAC;QACrB,CAAC;QAED,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,oBAAS,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,oBAAS,CAAC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7F,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;CAAA;AArCD,oCAqCC","sourcesContent":["import { minify } from 'uglify-js';\nimport { writeFile, readFile } from 'fs-extra';\nimport { extname, basename } from 'path';\nimport { debug, warn } from './../util/log';\n\nexport async function minifyJsFile(inputPath: string): Promise<string> {\n  debug(`minifyJsFile: ${inputPath}`);\n\n  const fileExtension: string = extname(inputPath);\n  const pathWithNoExtension: string = inputPath.substring(0, inputPath.length - fileExtension.length);\n\n  const outputPath: string = `${pathWithNoExtension}.min${fileExtension}`;\n  const sourcemapOut: string = `${outputPath}.map`;\n  const inputFileBuffer: Buffer = await readFile(inputPath);\n  const inputSourceMapBuffer: Buffer = await readFile(`${inputPath}.map`);\n  const result = minify(inputFileBuffer.toString(), {\n    sourceMap: {\n      content: inputSourceMapBuffer.toString(),\n      url: basename(sourcemapOut)\n    },\n    parse: {\n      bare_returns: true\n    },\n    ie8: true,\n    warnings: true,\n    output: {\n      comments: 'some'\n    }\n  });\n\n  if (result.warnings) {\n    for (const warningMessage of result.warnings) {\n      warn(warningMessage);\n    }\n  }\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  await Promise.all([writeFile(outputPath, result.code), writeFile(sourcemapOut, result.map)]);\n  return outputPath;\n}\n"]}