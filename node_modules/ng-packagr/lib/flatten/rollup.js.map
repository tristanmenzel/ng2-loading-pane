{"version":3,"file":"rollup.js","sourceRoot":"","sources":["../../../src/lib/flatten/rollup.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iCAAiC;AACjC,0DAA0D;AAC1D,mDAAmD;AACnD,iDAAiD;AACjD,iDAAiD;AAEjD,mCAAmC;AACnC,+EAAyE;AACzE,qEAA+D;AAkB/D,mEAAmE;AACnE,0BAAuC,IAAmB;;QACxD,GAAG,CAAC,KAAK,CAAC,YAAY,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAExF,MAAM,aAAa,GAAG;YACpB,WAAW,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;YAC3C,QAAQ,EAAE;YACV,OAAO,CAAC;gBACN,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,CAAC;SACH,CAAC;QAEF,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,aAAa,CAAC,IAAI,CAChB,OAAO,CAAC;gBACN,SAAS,EAAE,IAAI;gBACf,MAAM,EAAE;oBACN,IAAI,EAAE,IAAI,CAAC,WAAW;oBACtB,QAAQ,EAAE,OAAO;iBAClB;aACF,CAAC,CACH,CAAC;QACJ,CAAC;QAED,oBAAoB;QACpB,MAAM,MAAM,GAAuB,MAAM,MAAM,CAAC,MAAM,CAAC;YACrD,OAAO,EAAE,MAAM;YACf,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,sDAAwB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YAC7E,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,aAAa;YACtB,MAAM,EAAE,OAAO,CAAC,EAAE;gBAChB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAChC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,mBAAmB,CAAC,CAAC,CAAC;wBACzC,MAAM,CAAC;oBACT,CAAC;oBAED,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;YACD,gBAAgB,EAAE,IAAI;SACvB,CAAC,CAAC;QAEH,4BAA4B;QAC5B,MAAM,MAAM,CAAC,KAAK,CAAC;YACjB,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;YAC1B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,4CAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC;YAC3E,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;CAAA;AApDD,4CAoDC","sourcesContent":["import * as rollup from 'rollup';\nimport * as nodeResolve from 'rollup-plugin-node-resolve';\nimport * as commonJs from 'rollup-plugin-commonjs';\nimport * as cleanup from 'rollup-plugin-cleanup';\nimport * as license from 'rollup-plugin-license';\nimport * as path from 'path';\nimport * as log from '../util/log';\nimport { externalModuleIdStrategy } from './external-module-id-strategy';\nimport { umdModuleIdStrategy } from './umd-module-id-strategy';\n\n/**\n * Options used in `ng-packagr` for writing flat bundle files.\n *\n * These options are passed through to rollup.\n */\nexport interface RollupOptions {\n  moduleName: string;\n  entry: string;\n  format: rollup.ModuleFormat;\n  dest: string;\n  umdModuleIds?: { [key: string]: string };\n  embedded?: string[];\n  comments?: string;\n  licensePath?: string;\n}\n\n/** Runs rollup over the given entry file, writes a bundle file. */\nexport async function rollupBundleFile(opts: RollupOptions): Promise<void> {\n  log.debug(`rollup (v${rollup.VERSION}) ${opts.entry} to ${opts.dest} (${opts.format})`);\n\n  const rollupPlugins = [\n    nodeResolve({ jsnext: true, module: true }),\n    commonJs(),\n    cleanup({\n      comments: opts.comments\n    })\n  ];\n\n  if (opts.licensePath) {\n    rollupPlugins.push(\n      license({\n        sourceMap: true,\n        banner: {\n          file: opts.licensePath,\n          encoding: 'utf-8'\n        }\n      })\n    );\n  }\n\n  // Create the bundle\n  const bundle: rollup.OutputChunk = await rollup.rollup({\n    context: 'this',\n    external: moduleId => externalModuleIdStrategy(moduleId, opts.embedded || []),\n    input: opts.entry,\n    plugins: rollupPlugins,\n    onwarn: warning => {\n      if (typeof warning === 'string') {\n        log.warn(warning);\n      } else {\n        if (warning.code === 'THIS_IS_UNDEFINED') {\n          return;\n        }\n\n        log.warn(warning.message);\n      }\n    },\n    preserveSymlinks: true\n  });\n\n  // Output the bundle to disk\n  await bundle.write({\n    name: `${opts.moduleName}`,\n    file: opts.dest,\n    format: opts.format,\n    banner: '',\n    globals: moduleId => umdModuleIdStrategy(moduleId, opts.umdModuleIds || {}),\n    sourcemap: true\n  });\n}\n"]}