{"version":3,"file":"external-module-id-strategy.js","sourceRoot":"","sources":["../../../src/lib/flatten/external-module-id-strategy.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAEhB,QAAA,wBAAwB,GAAG,CAAC,QAAgB,EAAE,WAAqB,EAAE,EAAW,EAAE;IAC7F,oEAAoE;IACpE,yFAAyF;IACzF,EAAE,CAAC,CACD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QACzB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;QACxB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;QACxB,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,kFAAkF;QAC9H,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CACnC,CAAC,CAAC,CAAC;QACD,yFAAyF;QACzF,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import * as path from 'path';\n\nexport const externalModuleIdStrategy = (moduleId: string, embedded: string[] = []): boolean => {\n  // more information about why we don't check for 'node_modules' path\n  // https://github.com/rollup/rollup-plugin-node-resolve/issues/110#issuecomment-350353632\n  if (\n    path.isAbsolute(moduleId) ||\n    moduleId.startsWith('.') ||\n    moduleId.startsWith('/') ||\n    moduleId.indexOf('commonjsHelpers') >= 0 || // in case we are embedding a commonjs module we need to include it's helpers also\n    embedded.some(x => x === moduleId)\n  ) {\n    // if it's either 'absolute', marked to embed, starts with a '.' or '/' it's not external\n    return false;\n  }\n\n  return true;\n};\n"]}