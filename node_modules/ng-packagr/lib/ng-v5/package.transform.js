"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const concat_1 = require("rxjs/observable/concat");
const fromPromise_1 = require("rxjs/observable/fromPromise");
const of_1 = require("rxjs/observable/of");
const operators_1 = require("rxjs/operators");
const pipe_1 = require("rxjs/util/pipe");
const node_1 = require("../brocc/node");
const log = require("../util/log");
const copy_1 = require("../util/copy");
const rimraf_1 = require("../util/rimraf");
const discover_packages_1 = require("./discover-packages");
exports.packageTransformFactory = (project, entryPointTransform) => (source$) => {
    const pkgUri = `ng://${project}`;
    return source$.pipe(operators_1.tap(() => {
        log.info(`Building Angular Package`);
    }), 
    // Discover packages and entry points
    operators_1.switchMap(graph => {
        const pkg = discover_packages_1.discoverPackages({ project });
        return fromPromise_1.fromPromise(pkg).pipe(operators_1.map(value => {
            const ngPkg = new node_1.Node(pkgUri);
            ngPkg.type = 'application/ng-package';
            ngPkg.data = value;
            return graph.put(ngPkg);
        }));
    }), 
    // Clean the primary dest folder (should clean all secondary sub-directory, as well)
    operators_1.switchMap(graph => fromPromise_1.fromPromise(rimraf_1.rimraf(graph.get(pkgUri).data.dest)), (graph, _) => graph), 
    // Add entry points to graph
    operators_1.map(graph => {
        const ngPkg = graph.get(pkgUri);
        const entryPoints = [ngPkg.data.primary, ...ngPkg.data.secondaries].map(entryPoint => {
            // TODO: use `os-tmpdir` instead -> https://www.npmjs.com/package/os-tmpdir
            // import * as tmpdir from 'os-tempdir'; tmpdir();
            const stageDir = path.resolve(ngPkg.data.workingDirectory, entryPoint.flatModuleFile, 'stage');
            const outDir = path.resolve(ngPkg.data.workingDirectory, entryPoint.flatModuleFile, 'out');
            const node = new node_1.Node(`ng://${entryPoint.moduleId}`);
            node.type = 'application/ng-entry-point';
            node.data = { entryPoint, outDir, stageDir };
            node.state = 'dirty';
            node.addDependent(ngPkg);
            return node;
        });
        return graph.put(entryPoints);
    }), 
    // Next, run through the entry point transformation
    operators_1.switchMap(graph => {
        const eachEntryPoint$ = graph
            .filter(node => node.type === 'application/ng-entry-point')
            .map(() => of_1.of(graph).pipe(entryPointTransform));
        return concat_1.concat(...eachEntryPoint$).pipe(operators_1.takeLast(1));
    }), 
    // Write npm package to dest folder
    writeNpmPackage(pkgUri), operators_1.tap(graph => {
        const ngPkg = graph.get(pkgUri);
        log.success(`Built Angular Package!
- from: ${ngPkg.data.src}
- to:   ${ngPkg.data.dest}`);
    }));
};
const writeNpmPackage = (pkgUri) => pipe_1.pipe(operators_1.switchMap(graph => {
    const ngPkg = graph.get(pkgUri);
    return fromPromise_1.fromPromise(Promise.all([
        copy_1.copyFiles(`${ngPkg.data.src}/README.md`, ngPkg.data.dest),
        copy_1.copyFiles(`${ngPkg.data.src}/LICENSE`, ngPkg.data.dest),
        rimraf_1.rimraf(ngPkg.data.workingDirectory)
    ])).pipe(operators_1.map(() => graph));
}));
//# sourceMappingURL=package.transform.js.map