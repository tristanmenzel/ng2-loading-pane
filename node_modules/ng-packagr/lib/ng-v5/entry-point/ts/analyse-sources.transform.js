"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("rxjs/operators");
const pipe_1 = require("rxjs/util/pipe");
const log = require("../../../util/log");
const node_1 = require("../../../brocc/node");
const transform_source_files_1 = require("../../../ngc/transform-source-files");
const ng_component_transformer_1 = require("../../../ts/ng-component-transformer");
const entry_point_node_1 = require("../../entry-point.node");
exports.analyseSourcesTransform = pipe_1.pipe(operators_1.map(graph => {
    const entryPoint = graph.find(entry_point_node_1.byEntryPoint().and(entry_point_node_1.isInProgress));
    log.debug(`Analysing sources for ${entryPoint.data.entryPoint.moduleId}`);
    const tsConfig = entryPoint.data.tsConfig;
    /** Extracts templateUrl and styleUrls from `@Component({..})` decorators. */
    const extractResources = ng_component_transformer_1.transformComponentSourceFiles({
        template: ({ templateFilePath }) => {
            // TODO: HtmlNode / TemplateNode
            const node = new node_1.Node('file://' + templateFilePath);
            node.type = 'text/html';
            graph.put(node);
            // TODO: mark entryPoint dependsOn node
            entryPoint.addDependent(node);
        },
        stylesheet: ({ styleFilePath }) => {
            // TODO: CssNode / StylesheetNode
            const node = new node_1.Node('file://' + styleFilePath);
            node.type = 'text/css';
            graph.put(node);
            // TODO: mark entryPoint dependsOn node
            entryPoint.addDependent(node);
        }
    });
    // XX: ideally, the TypeScript sources are added as individual nodes on the graph
    entryPoint.data.tsSources = transform_source_files_1.transformSourceFiles(tsConfig, [extractResources]);
    // TODO: typescript sources may also be added as individual nodes on the graph
    const tsSourcesNode = new node_1.Node('ts://' + entryPoint.data.entryPoint.moduleId);
    tsSourcesNode.type = 'application/ts';
    tsSourcesNode.data = entryPoint.data.tsSources;
    graph.put(tsSourcesNode);
    // TODO: mark entryPoint dependsOn tsSourcesNode
    return graph;
}));
//# sourceMappingURL=analyse-sources.transform.js.map