{"version":3,"file":"init-tsconfig.di.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/init-tsconfig.di.ts"],"names":[],"mappings":";;AACA,+CAAuE;AAEvE,8DAAkF;AAClF,uEAAyE;AACzE,mDAAqE;AAExD,QAAA,eAAe,GAAG,CAAC,MAA0B,EAAY,EAAE;IACtE,MAAM,QAAQ,GAAa,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,8BAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAE7F,MAAM,CAAC;QACL,OAAO,EAAE,+BAAuB;QAChC,UAAU,EAAE,GAAG,EAAE;YACf,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,8BAAmB,EAAE,CAAC;YAC/B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACtC,MAAM,CAAC,8BAAmB,CAAC,MAAM,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC;QACH,CAAC;QACD,IAAI,EAAE,EAAE;KACT,CAAC;AACJ,CAAC,CAAC;AAEW,QAAA,uBAAuB,GAAG,IAAI,6BAAc,CAAW,uBAAuB,CAAC,CAAC;AAEhF,QAAA,0BAA0B,GAAa,uBAAe,EAAE,CAAC;AAEzD,QAAA,oBAAoB,GAAG,IAAI,6BAAc,CAAY,6BAA6B,CAAC,CAAC;AAEpF,QAAA,wBAAwB,GAAsB,+BAAgB,CAAC;IAC1E,OAAO,EAAE,4BAAoB;IAC7B,UAAU,EAAE,sDAA4B;IACxC,IAAI,EAAE,CAAC,+BAAuB,CAAC;CAChC,CAAC,CAAC","sourcesContent":["import { ParsedConfiguration } from '@angular/compiler-cli';\nimport { InjectionToken, Provider, ValueProvider } from 'injection-js';\nimport { Transform } from '../../../brocc/transform';\nimport { TransformProvider, provideTransform } from '../../../brocc/transform.di';\nimport { initTsConfigTransformFactory } from './init-tsconfig.transform';\nimport { readDefaultTsConfig, TsConfig } from '../../../ts/tsconfig';\n\nexport const provideTsConfig = (values?: TsConfig | string): Provider => {\n  const tsConfig: TsConfig = typeof values === 'string' ? readDefaultTsConfig(values) : values;\n\n  return {\n    provide: DEFAULT_TS_CONFIG_TOKEN,\n    useFactory: () => {\n      if (!values) {\n        return readDefaultTsConfig();\n      } else if (typeof values === 'string') {\n        return readDefaultTsConfig(values);\n      } else {\n        return values;\n      }\n    },\n    deps: []\n  };\n};\n\nexport const DEFAULT_TS_CONFIG_TOKEN = new InjectionToken<TsConfig>('ng.v5.defaultTsConfig');\n\nexport const DEFAULT_TS_CONFIG_PROVIDER: Provider = provideTsConfig();\n\nexport const INIT_TS_CONFIG_TOKEN = new InjectionToken<Transform>('ng.v5.initTsConfigTransform');\n\nexport const INIT_TS_CONFIG_TRANSFORM: TransformProvider = provideTransform({\n  provide: INIT_TS_CONFIG_TOKEN,\n  useFactory: initTsConfigTransformFactory,\n  deps: [DEFAULT_TS_CONFIG_TOKEN]\n});\n"]}