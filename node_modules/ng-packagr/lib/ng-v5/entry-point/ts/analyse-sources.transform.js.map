{"version":3,"file":"analyse-sources.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/analyse-sources.transform.ts"],"names":[],"mappings":";;AAAA,8CAAqC;AACrC,yCAAsC;AAGtC,yCAAyC;AACzC,8CAA2C;AAE3C,gFAA2E;AAC3E,mFAAqF;AAErF,6DAAoE;AAEvD,QAAA,uBAAuB,GAAc,WAAI,CACpD,eAAG,CAAC,KAAK,CAAC,EAAE;IACV,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,+BAAY,EAAE,CAAC,GAAG,CAAC,+BAAY,CAAC,CAAC,CAAC;IAChE,GAAG,CAAC,KAAK,CAAC,yBAAyB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAE1E,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;IAE1C,6EAA6E;IAC7E,MAAM,gBAAgB,GAAG,wDAA6B,CAAC;QACrD,QAAQ,EAAE,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE;YACjC,gCAAgC;YAChC,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,CAAC;YACpD,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;YACxB,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAEhB,uCAAuC;YACvC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QACD,UAAU,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE;YAChC,iCAAiC;YACjC,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,SAAS,GAAG,aAAa,CAAC,CAAC;YACjD,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;YACvB,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAEhB,uCAAuC;YACvC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;KACF,CAAC,CAAC;IAEH,iFAAiF;IACjF,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,6CAAoB,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAE/E,8EAA8E;IAC9E,MAAM,aAAa,GAAG,IAAI,WAAI,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC9E,aAAa,CAAC,IAAI,GAAG,gBAAgB,CAAC;IACtC,aAAa,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;IAC/C,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IACzB,gDAAgD;IAEhD,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAC,CACH,CAAC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { pipe } from 'rxjs/util/pipe';\nimport * as ng from '@angular/compiler-cli';\nimport * as ts from 'typescript';\nimport * as log from '../../../util/log';\nimport { Node } from '../../../brocc/node';\nimport { Transform } from '../../../brocc/transform';\nimport { transformSourceFiles } from '../../../ngc/transform-source-files';\nimport { transformComponentSourceFiles } from '../../../ts/ng-component-transformer';\nimport { TsConfig } from '../../../ts/tsconfig';\nimport { byEntryPoint, isInProgress } from '../../entry-point.node';\n\nexport const analyseSourcesTransform: Transform = pipe(\n  map(graph => {\n    const entryPoint = graph.find(byEntryPoint().and(isInProgress));\n    log.debug(`Analysing sources for ${entryPoint.data.entryPoint.moduleId}`);\n\n    const tsConfig = entryPoint.data.tsConfig;\n\n    /** Extracts templateUrl and styleUrls from `@Component({..})` decorators. */\n    const extractResources = transformComponentSourceFiles({\n      template: ({ templateFilePath }) => {\n        // TODO: HtmlNode / TemplateNode\n        const node = new Node('file://' + templateFilePath);\n        node.type = 'text/html';\n        graph.put(node);\n\n        // TODO: mark entryPoint dependsOn node\n        entryPoint.addDependent(node);\n      },\n      stylesheet: ({ styleFilePath }) => {\n        // TODO: CssNode / StylesheetNode\n        const node = new Node('file://' + styleFilePath);\n        node.type = 'text/css';\n        graph.put(node);\n\n        // TODO: mark entryPoint dependsOn node\n        entryPoint.addDependent(node);\n      }\n    });\n\n    // XX: ideally, the TypeScript sources are added as individual nodes on the graph\n    entryPoint.data.tsSources = transformSourceFiles(tsConfig, [extractResources]);\n\n    // TODO: typescript sources may also be added as individual nodes on the graph\n    const tsSourcesNode = new Node('ts://' + entryPoint.data.entryPoint.moduleId);\n    tsSourcesNode.type = 'application/ts';\n    tsSourcesNode.data = entryPoint.data.tsSources;\n    graph.put(tsSourcesNode);\n    // TODO: mark entryPoint dependsOn tsSourcesNode\n\n    return graph;\n  })\n);\n"]}