{"version":3,"file":"write-package.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-v5/entry-point/write-package.transform.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { Transform, transformFromPromise } from '../../brocc/transform';\nimport { writeFlatBundleFiles, FlattenOpts } from '../../flatten/flatten';\nimport { NgEntryPoint } from '../../ng-package-format/entry-point';\nimport { NgPackage } from '../../ng-package-format/package';\nimport { relocateSourceMaps } from '../../sourcemaps/relocate';\nimport { ensureUnixPath } from '../../util/path';\nimport { copyFiles } from '../../util/copy';\nimport * as log from '../../util/log';\nimport { byEntryPoint, isInProgress } from '../entry-point.node';\n\nexport const writePackageTransform: Transform = transformFromPromise(async graph => {\n  const entryPoint = graph.find(byEntryPoint().and(isInProgress));\n  const ngEntryPoint: NgEntryPoint = entryPoint.data.entryPoint;\n  const ngPackage: NgPackage = graph.find(node => node.type === 'application/ng-package').data;\n\n  // 5. COPY SOURCE FILES TO DESTINATION\n  log.info('Copying staged files');\n  copyFiles(`${path.dirname(ngEntryPoint.entryFilePath)}/**/*.d.ts`, entryPoint.data.outDir);\n  await copyJavaScriptBundles(entryPoint.data.stageDir, ngPackage.dest);\n  await copyTypingsAndMetadata(entryPoint.data.outDir, ngEntryPoint.destinationPath);\n\n  // 6. WRITE PACKAGE.JSON\n  log.info('Writing package metadata');\n  const relativeDestPath: string = path.relative(ngEntryPoint.destinationPath, ngPackage.primary.destinationPath);\n  await writePackageJson(ngEntryPoint, {\n    main: ensureUnixPath(path.join(relativeDestPath, 'bundles', ngEntryPoint.flatModuleFile + '.umd.js')),\n    module: ensureUnixPath(path.join(relativeDestPath, 'esm5', ngEntryPoint.flatModuleFile + '.js')),\n    es2015: ensureUnixPath(path.join(relativeDestPath, 'esm2015', ngEntryPoint.flatModuleFile + '.js')),\n    typings: ensureUnixPath(`${ngEntryPoint.flatModuleFile}.d.ts`),\n    // XX 'metadata' property in 'package.json' is non-standard. Keep it anyway?\n    metadata: ensureUnixPath(`${ngEntryPoint.flatModuleFile}.metadata.json`)\n  });\n\n  log.success(`Built ${ngEntryPoint.moduleId}`);\n\n  return graph;\n});\n\n/**\n * Creates and writes a `package.json` file of the entry point used by the `node_module`\n * resolution strategies.\n *\n * #### Example\n *\n * A consumer of the enty point depends on it by `import {..} from '@my/module/id';`.\n * The module id `@my/module/id` will be resolved to the `package.json` file that is written by\n * this build step.\n * The proprties `main`, `module`, `typings` (and so on) in the `package.json` point to the\n * flattened JavaScript bundles, type definitions, (...).\n *\n * @param entryPoint An entry point of an Angular package / library\n * @param binaries Binary artefacts (bundle files) to merge into `package.json`\n */\nexport async function writePackageJson(entryPoint: NgEntryPoint, binaries: { [key: string]: string }): Promise<void> {\n  log.debug('Writing package.json');\n  const packageJson: any = entryPoint.packageJson;\n  // set additional properties\n  for (const fieldName in binaries) {\n    packageJson[fieldName] = binaries[fieldName];\n  }\n\n  // read tslib version from `@angular/compiler` so that our tslib\n  // version at least matches that of angular if we use require('tslib').version\n  // it will get what installed and not the minimum version nor if it is a `~` or `^`\n  if (!(packageJson.dependencies && packageJson.dependencies.tslib)) {\n    const { dependencies: angularDependencies = {} } = require('@angular/compiler/package.json');\n    const TSLIB_VERSION = angularDependencies.tslib;\n\n    if (TSLIB_VERSION) {\n      packageJson.dependencies = {\n        ...packageJson.dependencies,\n        tslib: TSLIB_VERSION\n      };\n    }\n  }\n\n  packageJson.name = entryPoint.moduleId;\n\n  // keep the dist package.json clean\n  // this will not throw if ngPackage field does not exist\n  delete packageJson.ngPackage;\n\n  // `outputJson()` creates intermediate directories, if they do not exist\n  // -- https://github.com/jprichardson/node-fs-extra/blob/master/docs/outputJson.md\n  await fs.outputJson(path.resolve(entryPoint.destinationPath, 'package.json'), packageJson, { spaces: 2 });\n}\n\n/**\n * Copies the JavaScript bundles from the staging directory to the npm package.\n */\nexport async function copyJavaScriptBundles(stageDir: string, destDir: string): Promise<void> {\n  await copyFiles(`${stageDir}/bundles/**/*.{js,js.map}`, path.resolve(destDir, 'bundles'));\n  await copyFiles(`${stageDir}/esm5/**/*.{js,js.map}`, path.resolve(destDir, 'esm5'));\n  await copyFiles(`${stageDir}/esm2015/**/*.{js,js.map}`, path.resolve(destDir, 'esm2015'));\n}\n\nexport async function copyTypingsAndMetadata(from: string, to: string): Promise<void> {\n  await copyFiles(`${from}/**/*.{d.ts,metadata.json}`, to);\n}\n"]}